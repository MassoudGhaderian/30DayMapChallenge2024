---
title: "#30DMC_16Nov_Choropleth"
author: "Eugenio Muccio"
date: "2024-11-16"
format: 
  html: default
  pdf: default
---

## 16 November - Choropleth

"Classic choropleth map. Use color to show data variation across regions. This simple but effective technique is a staple for showing thematic differences."

### 1. Load packages

```{r, echo=FALSE, warning=FALSE}

# Define the packages to be used
packages <- c("tidyverse","here","sf","ggplot2","scales","gridExtra","magick","grid", "dplyr","biscale","patchwork", "sysfonts","showtext", "jsonlite","curl","cowplot")

# Function to check if packages are installed and load them
load_packages <- function(pkgs) {
  # Check for missing packages
  missing_pkgs <- pkgs[!(pkgs %in% installed.packages()[, "Package"])]
  
  # Install missing packages
  if (length(missing_pkgs)) {
    install.packages(missing_pkgs)
  }
  
  # Load all packages
  lapply(pkgs, library, character.only = TRUE)
}

# Load the packages
load_packages(packages)

# Print a message to confirm successful loading
cat("All specified packages have been loaded successfully!\n")
```

### 2. Import data & Rbanism logo

```{r}

woz_2023 <- read_sf(here('30_day_map/data', 'rotterdam_buurten_stats_2023.shp'))
listings_2023 <- read_sf(here('30_day_map/data', 'listings_12_2023_mean.shp'))

rbanism_logo <- image_read('https://rbanism.org/assets/imgs/about/vi_l.jpg')

```

### 3. Data processing

```{r}
# Replace -99997 values
woz_2023 <- woz_2023 %>%
  mutate(gemiddel_1 = ifelse(gemiddel_1 == -99997, NA, gemiddel_1))

# Align CRS
listings_2023 <- st_transform(listings_2023, st_crs(woz_2023))

# Check
st_crs(listings_2023)
st_crs(woz_2023)

# Attribute-based join
merged_data <- woz_2023 %>%
  left_join(st_drop_geometry(listings_2023), by = "buurtcode")

# Replace NA values with 0
merged_data <- merged_data %>%
  mutate(
    gemiddel_1 = ifelse(is.na(gemiddel_1), 0, gemiddel_1),
    price_n_me = ifelse(is.na(price_n_me), 0, price_n_me)
  )

# Bivariate classification
bivariate_class <- bi_class(
  merged_data,
  x = gemiddel_1,    
  y = price_n_me,   
  style = "quantile",
  dim = 3
)

```

### 3. Visualize

```{r}

# Add Google font
font_add_google("Roboto Mono", "roboto_mono")
showtext_auto()

# Custom theme
custom_theme <- theme_minimal(base_family = "roboto_mono") +
  theme(
    plot.title = element_text(family = "roboto_mono", size = 40, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(family = "roboto_mono", size = 28, hjust = 0.5),
    plot.caption = element_text(family = "roboto_mono", size = 25, hjust = 0.5),
    legend.position = "none"
  )

# Create the bivariate map
bivariate_map <- ggplot() +
  geom_sf(data = bivariate_class, aes(fill = bi_class), color = "white", size = 0.1) +
  bi_scale_fill(pal = "DkBlue", dim = 3) +
  custom_theme +
  labs(
    title = "Day 16. Choropleth. The Long-Term & Short-Term City",
    subtitle = "Average Market Value (WOZ) of Residential Property vs. Average Daily Rate of Short-Term Rentals in Rotterdam, 2023",
    caption = "#30DayMapChallenge | Map by Eugenio Muccio, 2024 | Data: CBS, Inside Airbnb"
  )

# Create the bivariate legend
bivariate_legend <- bi_legend(
  pal = "DkBlue",
  dim = 3,
  xlab = "WOZ (Low → High)",
  ylab = "ADR (Low → High)",
  arrows = FALSE,
  size = 15
)

# Add legend to the map
final_plot <- bivariate_map + 
  inset_element(
    bivariate_legend, 
    left = 0.02, bottom = 0.02, right = 0.3, top = 0.2, 
    align_to = "panel"
  )

# Insert logo
logo_grob <- rasterGrob(rbanism_logo, interpolate = TRUE)

final_plot_with_logo <- final_plot + 
  inset_element(
    logo_grob, 
    left = 0.85, right = 1, bottom = 0.075, top = 0.175,
    align_to = "full"
  )

# Save the final plot with the logo
ggsave(
  "choropleth_map.png", 
  plot = final_plot_with_logo, 
  width = 16, 
  height = 9, 
  units = "in", 
  dpi = 250
)

```

# Output

![](choropleth_map.png)
