---
title: "2. Lines Map: Natural roads in Bucharest"
author:
  - "Claudiu Forgaci"
  - "Francesco Nattino"
date: "2024-10-25"
format: 
  html: default
  pdf: default
---

### 0. Load packages

```{r}
# Define the packages to be used
cran_packages <- c("tidyverse", "sf", "pak", "sysfonts", "showtext", 
                   "osmdata", "magick", "grid")

# Function to check if packages are installed and load them
load_packages <- function(pkgs) {
  # Check for missing packages
  missing_pkgs <- pkgs[!(pkgs %in% installed.packages()[, "Package"])]
  
  # Install missing packages
  if (length(missing_pkgs)) {
    install.packages(missing_pkgs)
  }
  
  # Load all packages
  lapply(pkgs, library, character.only = TRUE)
}

# Load the packages
load_packages(cran_packages)

# Install package containing the data used in the plot
suppressMessages({
  pak::pkg_install("CityRiverSpaces/CRiSp")
  pak::pkg_install("CityRiverSpaces/rcoins")
})

library(CRiSp)
library(rcoins)

# Print a message to confirm successful loading
cat("All packages have been loaded successfully!\n")
```

```{r}
# Download Rbanism logo
rbanism_logo <- image_read('../rbanism_logo_white.png')
```


### 1. Get base street network of Bucharest

```{r}
# Get full street network
streets <- opq("Bucharest") |> 
  add_osm_feature(key = "highway") |> 
  osmdata_sf()
street_data <- streets$osm_lines |> 
  st_transform(32635)
```

### 2. Calculate strokes along street network

```{r}
# Get strokes along the main street network of Bucharest using 
# the Continuity in Street Networks (COINS) algorithm implemented
# with the `stroke()` function in {rcoins}
strokes <- rcoins::stroke(bucharest$streets)
```

### 3. Calculate length of strokes to be visualised

```{r}
# Calculate length of strokes
strokes <- strokes |> st_as_sf() |> mutate(length = st_length(strokes))

# Ensure that the geometry column is properly named
st_geometry(strokes) <- "geom"
```

## Plot the Point Map

### 1. Create the plot

```{r}
# Create the base plot
p <- ggplot() +
  geom_sf(data = street_data, linewidth = 0.05, color = "white") +
  geom_sf(data = strokes, aes(linewidth = as.numeric(length)), color = "#FFFFC5") +
  scale_linewidth_continuous(name = "Main structures:", range = c(0.1, 1.2)) +
  xlim(418500, 437500) +
  ylim(4909800, 4931500) +
  coord_sf(datum = st_crs(32635))
```

### 2. Style the map

#### 2.1 Add custom fonts

```{r}
# Add Google Fonts to the system
font_add_google("Roboto", "roboto")  # Add the "Roboto" font
font_add_google("Montserrat", "montserrat")  # Add the "Montserrat" font
showtext_auto()
```

#### 2.2 Plot your map

```{r}
p_styled <- p +
  theme_void() +
  theme(
    plot.background = element_rect(fill = "#103251",
                                    color = NA),
    plot.margin = margin(10, 90, 10, 90),
    legend.position = "bottom",
    legend.box = "horizontal",
    # legend.title = element_blank(), 
    legend.title = element_text(size = 13,
                              family = "montserrat",
                              color = "white"), 
    legend.text = element_text(size = 13,
                              family = "montserrat",
                              color = "white"),  
    plot.title = element_text(size = 34,
                              face = "bold",
                              family = "montserrat",
                              color = "white"), 
    plot.subtitle = element_text(size = 13,
                              family = "montserrat",
                              color = "white"), 
    plot.caption = element_text(size = 10,
                              family = "montserrat",
                              color = "white",
                              hjust = 0,
                              lineheight = 0.4),
    legend.key.height = unit(1, "cm"),  # Adjust height to make keys squared
    legend.key.width = unit(1, "cm"),   # Adjust width to match height
  ) +
  # Control legend appearance
  labs(title = "The structure of Bucharest",
       subtitle = "Continuous streets along the main street network, lineweight by length\n",
       caption = "Data: OpenStreetMap\nAuthor: Claudiu Forgaci\nPackages used:
- Forgaci C, Nattino F (2024). CRiSp: Automate the Delineation of Urban River Spaces. R package version 0.0.0.9000, https://cityriverspaces.github.io/CRiSp/.
- Nattino F, Forgaci C (2024). rcoins: Continuity in street networks. R package version 0.0.0.9000, https://cityriverspaces.github.io/rcoins/") 

p_styled
```

```{r}
p_styled <- cowplot::ggdraw(p_styled) +
  cowplot::draw_image(rbanism_logo, x = 0, y = 0, width = 0.1, height = 0.1, hjust = 0, vjust = 0)
```

```{r}
# Define the output file name
output_file <- "output/2Nov_StreetStrokes.png"

# Export the map as a PNG with 1:1 aspect ratio
ggsave(filename = output_file, plot = p_styled, device = "png", 
       width = 6, height = 6, dpi = 300)

# Print a message to confirm export
cat("Map has been exported as", output_file, "with a 1:1 aspect ratio.\n")
```

## And here is the map!

![Street strokes in Bucharest](output/2-streetstrokes.png)
