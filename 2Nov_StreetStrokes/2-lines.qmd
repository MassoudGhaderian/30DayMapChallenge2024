---
title: "2. Lines Map: Natural roads in Bucharest"
author:
  - "Claudiu Forgaci"
  - "Francesco Nattino?"
date: "2024-10-25"
format: 
  html: default
  pdf: default
---

## Data preparation

### 1. Load packages

```{r}
# Define the packages to be used
cran_packages <- c("ggplot2", "dplyr", "sf", "pak")

# Function to check if packages are installed and load them
load_packages <- function(pkgs) {
  # Check for missing packages
  missing_pkgs <- pkgs[!(pkgs %in% installed.packages()[, "Package"])]
  
  # Install missing packages
  if (length(missing_pkgs)) {
    install.packages(missing_pkgs)
  }
  
  # Load all packages
  lapply(pkgs, library, character.only = TRUE)
}

# Load the packages
load_packages(cran_packages)

# Install package containing the data used in the plot
suppressMessages({
  pak::pkg_install("CityRiverSpaces/CRiSp")
  pak::pkg_install("CityRiverSpaces/rcoins")
})

# Print a message to confirm successful loading
cat("All packages have been loaded successfully!\n")
```

### 2. Calculate strokes along street network

```{r}
# Get strokes along the main street network of Bucharest using 
# the Continuity in Street Networks (COINS) algorithm implemented
# with the `stroke()` function in {rcoins}
strokes <- rcoins::stroke(bucharest$streets)
```

### 3. Calculate length of strokes to be visualised

```{r}
# Calculate length of strokes
strokes <- strokes |> 
    st_as_sf() |> 
    mutate(length = st_length(strokes))

# Ensure that the geometry column is properly named
st_geometry(strokes) <- "geom"
```

## Plot the Point Map

### 1. Create the plot

```{r}
p <- strokes |>
  ggplot() +
  geom_sf(aes(linewidth = as.numeric(length))) +
  scale_linewidth_continuous(range = c(0.1, 1))
```

### 2. Style the map

#### 2.1 Add custom fonts

```{r}
# Add Google Fonts to the system
showtext_auto()  # Automatically use showtext for text rendering
font_add_google("Roboto", "roboto")  # Add the "Roboto" font from Google Fonts
font_add_google("Lobster", "script")  # Add the "Roboto" f
```

#### 2.2 Plot your map

```{r}
p <- p +
  theme_void()+
  theme(
    plot.background = element_rect(fill = "#103251", color = NA),  # Set bg color
    plot.margin = margin(10, 10, 10, 10),  # Adjust margins
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal",  # Arrange legends horizontally in bottom
    legend.title = element_blank(),  # Remove the title for the fill legend
    legend.text = element_text(size = 13,
                              family = "script",
                              color = "white"),  # Adjust text size and fon
    plot.title = element_text(size = 34,
                              face = "bold",
                              family = "script",
                              color = "white"),  # Title font customization
    plot.subtitle = element_text(size = 13,
                              family = "script",
                              color = "white"),  # Adjust text size and font legend
    plot.caption = element_text(size = 13,
                              family = "script",
                              color = "white"),
    legend.key.height = unit(1, "cm"),  # Adjust height to make keys squared
    legend.key.width = unit(1, "cm"),   # Adjust width to match height
  ) +
  
   # Add a title to the map
  ggtitle("How many buildings are in the Netherlands?") +  # Add your map title here

  # Control legend appearance
  labs(
    title = "Building density in the Netherlands",
    subtitle = "per 3D bag tile",
    caption = "Source: 3DBAG, Author: Daniele Cannatella",
    fill = "Object Number") +  # Add a label for the fill legend

  # Control legend appearance
  # Adjust the legend to have two rows
  guides(
    fill = guide_legend(ncol = 1, nrow = 2, keyheight = unit(0.25, "cm"), keywidth = unit(0.25, "cm"))
  )


tiles_p
```

```{r}
# Define the output file name
output_file <- "template/output/example_map.png"

# Export the map as a PNG with 1:1 aspect ratio
ggsave(filename = output_file, plot = tiles_p, device = "png", 
       width = 6, height = 6, units = "in", dpi = 300)

# Print a message to confirm export
cat("Map has been exported as", output_file, "with a 1:1 aspect ratio.\n")

# 
```

## And here is the map!

![Example Map](output/example_map.png){#fig:example_map}
